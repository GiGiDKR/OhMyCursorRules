---
description: MCP Server - Reasoning-Coder
globs: 
alwaysApply: false
---
# Reasoning-Coder MCP Server

## Tool Usage

The server provides two tools:

### `generate_response`

Generates a response using the configured reasoning and coding models.

```typescript
{
  "prompt": string,           // Required: The question or prompt
  "showReasoning"?: boolean, // Optional: Show the reasoning process
  "clearContext"?: boolean,  // Optional: Clear conversation history
  "includeHistory"?: boolean // Optional: Include Cline conversation history
}
```

### `check_response_status`

Checks the status of a response generation task.

```typescript
{
  "taskId": string  // Required: The task ID from generate_response
}
```

### Response Polling

1.  **Initial Request:** Call `generate_response` to get a `taskId`.

    ```typescript
    const result = await use_mcp_tool({
      server_name: "reasoning-coding",
      tool_name: "generate_response",
      arguments: {
        prompt: "Explain the theory of relativity.",
        showReasoning: true
      }
    });

    const taskId = JSON.parse(result.content[0].text).taskId;
    ```

2.  **Status Checking:**  Poll `check_response_status` with the `taskId` until the status is `complete` (or `error`).

    ```typescript
    const status = await use_mcp_tool({
      server_name: "reasoning-coding",
      tool_name: "check_response_status",
      arguments: { taskId }
    });
    
    // Example status response when complete:
    {
      "status": "complete",
      "reasoning": "...",  // If showReasoning was true
      "response": "..."    // The final response
      "error": undefined   // Will have a value if an error occurred
    }
    ```
